// Four rules to Game of Life
// 1. If a dead cell has exactly three live neighbours, it comes to life
// 2. If a live cell has less than two live neighbours, it dies
// 3. If a live cell has more than three live neighbours, it dies
// 4. If a live cell has two or three live neighbours, it continues living


Array.prototype.sample = function() {
	return this[Math.floor(Math.random()*this.length)];
}

// grid will have dimensions 
function createGrid(r) {
	var arr = [];

	for (i = 0; i < r; i++) {
		arr[i] = [];
 	}

 	return arr;
}

function fillGrid(width, height, grid) {

	for (var i = 0; i < height; i++) {
		for (var j = 0; j < width; j++) {
			var randVal = Math.floor(Math.random() + 0.5); // this will give either 0 or 1

			// if 1, alive
			if (randVal === 1) {
				grid[i][j] = 1;
			} else {
				grid[i][j] = 0;
			}
		}
	}

	return grid;
}

function draw(width, height, grid, elementName, scaling) {
	var canvas = document.getElementById(elementName);
	var ctx = canvas.getContext('2d'); // get canvas to draw on
	// console.log(ctx);

	var styles = ["rgb(88, 73, 144)", "rgb(0, 114, 135)", "rgb(142, 51, 109)", "rgb(46, 134, 97)"];

	// clear the canvas before doing anything
	ctx.clearRect(0, 0, width * scaling, height * scaling);

	for (var i = 0; i < width; i++) {
		for (var j = 0; j < height; j++) {
			if (grid[i][j] === 1) {
				// ctx.fillStyle = styles.sample();
				ctx.fillStyle = "rgb(0,0,0)";
				ctx.fillRect(i * scaling, j * scaling, scaling, scaling); // x, y, width, height
			}
		}
	}
}

function liveOneGeneration(w, h, grid, tempGrid) {

	for (var i = 1; i < h - 1; i++) {
		for (var j = 1; j < w - 1; j++) {
			var cellCount = 0;

			// need to count cells to apply rules of life

			// top left
			if (grid[i - 1][j + 1] === 1) {
				cellCount++;
			}

			// top
			if (grid[i][j + 1] === 1) {
				cellCount++;
			}

			// top right
			if (grid[i + 1][j + 1] === 1) {
				cellCount++;
			}

			// left
			if (grid[i - 1][j] === 1) {
				cellCount++;
			}

			// right
			if (grid[i + 1][j] === 1) {
				cellCount++;
			}

			// bottom left
			if (grid[i - 1][j - 1] === 1) {
				cellCount++;
			}

			// bottom right
			if (grid[i + 1][j - 1] === 1) {
				cellCount++;
			}

			// bottom
			if (grid[i][j - 1] === 1) {
				cellCount++;
			}

			// If a dead cell has exactly three live neighbours, it comes to life
			if (grid[i][j] === 0) {
				// make it come alive
				if (cellCount === 3) {
					tempGrid[i][j] = 1;
				}

			// alive cells
			} else {
				// If a live cell has less than two live neighbours, it dies
				if (cellCount < 2) {
					tempGrid[i][j] = 0;
				// If a live cell has more than three live neighbours, it dies
				} else if (cellCount > 3) {
					tempGrid[i][j] = 0;
				} else if (cellCount === 2 || cellCount === 3) {
					// nothing happens, stays alive
					tempGrid[i][j] = 1;
				}
			}
		}
	} 

	for (var i = 0; i < h; i++) {
		for (var j = 0; j < w; j++) {
			grid[i][j] = tempGrid[i][j];
		}
	}

	return [grid, tempGrid];
}

var oneohone = [[0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0],
				[0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0],
				[0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
				[1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1],
				[1,1,0,1,0,1,0,0,1,1,0,0,1,0,1,0,1,1],
				[0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0],
				[0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0],
				[1,1,0,1,0,1,0,0,1,1,0,0,1,0,1,0,1,1],
				[1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1],
				[0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
				[0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0],
				[0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0]];

var big_glider = [[0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
					[0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0],
					[0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],
					[1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
					[1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0],
					[1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0],
					[0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					[0,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0],
					[0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0],
					[0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,1,0],
					[0,0,0,0,1,1,0,1,0,0,0,0,1,1,0,0,0,1],
					[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0],
					[0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,1,0],
					[0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,1],
					[0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,0,0],
					[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
					[0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0],
					[0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0]];

var garden_of_eden = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					[0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,0,0],
					[0,0,0,0,0,1,0,1,1,1,0,1,1,1,0,1,1,0,1,0,0,0,0,0],
					[0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,0,1,0,0,0,0,0,0],
					[0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,1,1,1,0,0,0,0,0],
					[0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,0,0,0],
					[0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,0,0,0,0],
					[0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
					[0,0,0,0,0,1,0,1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,0],
					[0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0],
					[0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,0,1,0,1,0,0,0,0,0],
					[0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0],
					[0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0],
					[0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,0],
					[0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0],
					[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
					[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];

var grid3 = garden_of_eden.slice();
var temp3 = garden_of_eden.slice();

// h59 x w63
var corder_ship = 
	[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
	[0,1,1,1,1,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0],
	[1,1,0,1,1,1,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,0,0],
	[0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0,0],
	[0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0],
	[0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1],
	[0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1],
	[0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];

var temp2 = corder_ship.slice();

// create grid1 – randomized starting configuration
var gridWidth = 200;
var gridHeight = 200;
var grid1 = createGrid(gridWidth);
var temp1 = createGrid(gridWidth);

var scale1 = 4;
var scale2 = 12;
var scale3 = 15;

$(document).ready(function() {

	// grid 1
	document.getElementById('canvas').width = gridWidth * scale1;
	document.getElementById('canvas').height = gridHeight * scale1;

	grid1 = fillGrid(gridWidth, gridHeight, grid1);
	draw(gridWidth, gridHeight, grid1, 'canvas', scale1);


	// grid 2
	document.getElementById('canvas_custom').width = corder_ship.length * scale2;
	document.getElementById('canvas_custom').height = corder_ship[0].length * scale2;

	draw(corder_ship.length, corder_ship[0].length, corder_ship, 'canvas_custom', scale2);


	// grid 3
	document.getElementById('canvas_custom_2').width = grid3.length * scale3;
	document.getElementById('canvas_custom_2').height = grid3[0].length * scale3;

	draw(grid3.length, grid3[0].length, grid3, 'canvas_custom_2', scale3);

	var startEl = $('.button');


	startEl.on('click', function() {
		if ($(this).hasClass('pause-button')) {
			$(this).removeClass('pause-button');
			$(this).addClass('start-button');

			$(this).text('Resume');

		} else if ($(this).hasClass('start-button')) {
			$(this).removeClass('start-button');
			$(this).addClass('pause-button');

			$(this).text('Pause');

		}
	});

	var gen1 = 0;
	var gen2 = 0;
	var gen3 = 0;

	// grid1 draw
	setInterval(function() {

		if ($('#main-life-button').hasClass('pause-button')) {

			draw(gridWidth, gridHeight, grid1, 'canvas', scale1);
	    	ret = liveOneGeneration(gridWidth, gridHeight, grid1, temp1);
	    	grid1 = ret[0];
	    	temp1 = ret[1];

	    	gen1++;
	    	

	    	$('.main-gen').text('Generations: ' + gen1);
		}

		if ($('#snd-life-button').hasClass('pause-button')) {

			draw(corder_ship.length, corder_ship[0].length, corder_ship, 'canvas_custom', scale2);

	    	ret = liveOneGeneration(corder_ship.length, corder_ship[0].length, corder_ship, temp2);
	    	corder_ship = ret[0];
	    	temp2 = ret[1];
	    	
	    	gen2++;

	    	$('.snd-gen').text('Generations: ' + gen2);
		}


		if ($('#third-life-button').hasClass('pause-button')) {

			draw(grid3.length, grid3[0].length, grid3, 'canvas_custom_2', scale3);

	    	ret = liveOneGeneration(grid3.length, grid3[0].length, grid3, temp3);
	    	grid3 = ret[0];
	    	temp3 = ret[1];

	    	gen3++;

	    	$('.third-gen').text('Generations: ' + gen3);
		}
	    
	}, 100);


});



